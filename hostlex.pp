{ lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG }
{  template modified by ron wilson for revproxy           }

{ global definitions: }
//uses revlexlib, crt, math, strings, sysutils;
//{$i revlib.inc}
//const NS=20000;
//var sects : array [1..NS] of Integer;
var tempstr: string;

const COMMAND1 = 2;
const COMMAND2 = 4;
const COMMAND3 = 6;
const COMMAND4 = 8;
const COMMAND5 = 10;
const CIMMODE = 12;
const SECTOR = 14;
const SECTORPLANETS = 16;
const SECTORTRADERS = 18;
const SECTORSHIPS = 20;
const SECTORMINES = 22;

function yyhostlex(var yyvars : tyyvars; var display:tdisplay ) : Integer;

procedure yyaction ( yyruleno : Integer; var yyvars : tyyvars );
  { local definitions: }

begin
  { actions: }
  case yyruleno of
  1:
                  start(COMMAND1,yyvars);
  2:
                                
                  start(COMMAND2,yyvars);
  3:
                  // get sector from command prompt
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln('sector=',yyvars.yytext);
                    start(COMMAND3,yyvars);
                  end;

  4:
                  // start cim mode
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln('cim mode');
                    start(CIMMODE,yyvars);
                    inc(yyvars.yylineno);
                    yyvars.yycolno:=0;
                  end;
  5:
                                                  
                  // get from-to data from cim mode
                  begin
                    yyvars.yylineno+=max(countchar(yyvars.yytext,#10),countchar(yyvars.yytext,#13));
                    display_window(display,WINDOW_USERMSGS);
                    writeln('path: ',stripset(yyvars.yytext,[#32,#13,#10]));
                  end;
  6:
                                               
                  // get sector warp data from cim mode
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln('warps: ',yyvars.yytext);
                  end;
  7:
                                                          
                  // get port data from cim mode
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln('port: ',yyvars.yytext);
                  end;

  8:
                                     
                  // enter sector display
                  begin
                    // sector, beacon, port, planets, observer, aliens, traders, ships, figs, navhaz, mines, warps
                    start(SECTOR,yyvars);
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  9:
                             
                  // beacon
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  10:
                           
                  // port
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  11:
                                        
                  // port under construction
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  12:
                              
                  // planets
                  begin
                    start(SECTORPLANETS,yyvars);
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  13:
                                            
                  // traders
                  begin
                    start(SECTORTRADERS,yyvars);
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  14:
                                                        
                  // ships
                  begin
                    start(SECTORSHIPS,yyvars);
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  15:
                                                                       
                  // figs
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  16:
                                                                     
                  // navhaz
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  17:
                                                                    
                  // mines
                  begin
                    start(SECTORMINES,yyvars);
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;
  18:
                                                                      
                  // list extensions under planets, traders, ships, mines
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    tempstr:=stripansi(yyvars.yytext);
                    if yyvars.yysstate=SECTORPLANETS then
                    begin
                      if leftstr(tempstr,11)='          (' then writeln(' ',tempstr);
                    end
                    else writeln(' ',tempstr);
                  end;
  19:
                                                                                
                  // warps
                  begin
                    display_window(display,WINDOW_USERMSGS);
                    writeln(' ',stripansi(yyvars.yytext));
                  end;

  20,
  21:
  ;

  22,
  23,
  24,
  25:
                  
                  begin
                    inc(yyvars.yylineno);
                    yyvars.yycolno:=0;
                  end;

  end;
end{yyaction};

{ DFA table: }

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 57;
yynmatches = 57;
yyntrans   = 518;
yynstates  = 265;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  { 3: }
  { 4: }
  { 5: }
  { 6: }
  { 7: }
  { 8: }
  { 9: }
  { 10: }
  { 11: }
  { 12: }
  { 13: }
  { 14: }
  { 15: }
  { 16: }
  { 17: }
  { 18: }
  { 19: }
  { 20: }
  { 21: }
  { 22: }
  { 23: }
  { 24: }
  21,
  { 25: }
  21,
  24,
  { 26: }
  25,
  { 27: }
  21,
  { 28: }
  21,
  { 29: }
  21,
  { 30: }
  21,
  { 31: }
  21,
  { 32: }
  21,
  { 33: }
  3,
  21,
  { 34: }
  21,
  { 35: }
  21,
  { 36: }
  21,
  { 37: }
  21,
  { 38: }
  21,
  { 39: }
  21,
  { 40: }
  21,
  { 41: }
  21,
  { 42: }
  21,
  { 43: }
  21,
  { 44: }
  21,
  { 45: }
  21,
  { 46: }
  21,
  { 47: }
  21,
  { 48: }
  21,
  { 49: }
  21,
  { 50: }
  21,
  { 51: }
  21,
  { 52: }
  { 53: }
  23,
  { 54: }
  { 55: }
  { 56: }
  { 57: }
  { 58: }
  { 59: }
  2,
  { 60: }
  3,
  { 61: }
  { 62: }
  { 63: }
  { 64: }
  { 65: }
  { 66: }
  { 67: }
  { 68: }
  { 69: }
  { 70: }
  { 71: }
  { 72: }
  { 73: }
  { 74: }
  { 75: }
  { 76: }
  { 77: }
  { 78: }
  { 79: }
  18,
  { 80: }
  { 81: }
  { 82: }
  { 83: }
  { 84: }
  { 85: }
  { 86: }
  { 87: }
  { 88: }
  { 89: }
  { 90: }
  { 91: }
  { 92: }
  { 93: }
  6,
  { 94: }
  { 95: }
  { 96: }
  { 97: }
  { 98: }
  { 99: }
  { 100: }
  { 101: }
  { 102: }
  { 103: }
  { 104: }
  { 105: }
  { 106: }
  { 107: }
  { 108: }
  { 109: }
  { 110: }
  { 111: }
  { 112: }
  { 113: }
  { 114: }
  { 115: }
  { 116: }
  4,
  { 117: }
  { 118: }
  { 119: }
  { 120: }
  { 121: }
  { 122: }
  { 123: }
  6,
  { 124: }
  { 125: }
  { 126: }
  { 127: }
  { 128: }
  { 129: }
  { 130: }
  { 131: }
  { 132: }
  { 133: }
  { 134: }
  { 135: }
  { 136: }
  { 137: }
  { 138: }
  { 139: }
  { 140: }
  { 141: }
  { 142: }
  { 143: }
  { 144: }
  { 145: }
  { 146: }
  { 147: }
  { 148: }
  { 149: }
  { 150: }
  { 151: }
  { 152: }
  { 153: }
  { 154: }
  { 155: }
  { 156: }
  { 157: }
  1,
  { 158: }
  { 159: }
  { 160: }
  { 161: }
  { 162: }
  { 163: }
  { 164: }
  { 165: }
  { 166: }
  5,
  { 167: }
  { 168: }
  6,
  { 169: }
  { 170: }
  { 171: }
  { 172: }
  { 173: }
  { 174: }
  { 175: }
  { 176: }
  { 177: }
  { 178: }
  { 179: }
  { 180: }
  { 181: }
  { 182: }
  10,
  { 183: }
  { 184: }
  { 185: }
  { 186: }
  { 187: }
  { 188: }
  { 189: }
  { 190: }
  { 191: }
  { 192: }
  { 193: }
  { 194: }
  { 195: }
  { 196: }
  22,
  { 197: }
  { 198: }
  { 199: }
  { 200: }
  { 201: }
  { 202: }
  2,
  { 203: }
  5,
  { 204: }
  6,
  { 205: }
  { 206: }
  14,
  { 207: }
  { 208: }
  { 209: }
  { 210: }
  { 211: }
  { 212: }
  { 213: }
  17,
  { 214: }
  19,
  { 215: }
  { 216: }
  { 217: }
  { 218: }
  { 219: }
  { 220: }
  9,
  { 221: }
  { 222: }
  { 223: }
  { 224: }
  { 225: }
  16,
  { 226: }
  20,
  { 227: }
  { 228: }
  { 229: }
  12,
  { 230: }
  { 231: }
  13,
  { 232: }
  { 233: }
  { 234: }
  { 235: }
  { 236: }
  { 237: }
  { 238: }
  15,
  { 239: }
  { 240: }
  { 241: }
  { 242: }
  { 243: }
  { 244: }
  8,
  { 245: }
  { 246: }
  { 247: }
  { 248: }
  { 249: }
  { 250: }
  { 251: }
  { 252: }
  { 253: }
  { 254: }
  { 255: }
  { 256: }
  { 257: }
  { 258: }
  { 259: }
  { 260: }
  { 261: }
  11,
  { 262: }
  { 263: }
  { 264: }
  7
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
{ 3: }
{ 4: }
{ 5: }
{ 6: }
{ 7: }
{ 8: }
{ 9: }
{ 10: }
{ 11: }
{ 12: }
{ 13: }
{ 14: }
{ 15: }
{ 16: }
{ 17: }
{ 18: }
{ 19: }
{ 20: }
{ 21: }
{ 22: }
{ 23: }
{ 24: }
  21,
{ 25: }
  21,
  24,
{ 26: }
  25,
{ 27: }
  21,
{ 28: }
  21,
{ 29: }
  21,
{ 30: }
  21,
{ 31: }
  21,
{ 32: }
  21,
{ 33: }
  3,
  21,
{ 34: }
  21,
{ 35: }
  21,
{ 36: }
  21,
{ 37: }
  21,
{ 38: }
  21,
{ 39: }
  21,
{ 40: }
  21,
{ 41: }
  21,
{ 42: }
  21,
{ 43: }
  21,
{ 44: }
  21,
{ 45: }
  21,
{ 46: }
  21,
{ 47: }
  21,
{ 48: }
  21,
{ 49: }
  21,
{ 50: }
  21,
{ 51: }
  21,
{ 52: }
{ 53: }
  23,
{ 54: }
{ 55: }
{ 56: }
{ 57: }
{ 58: }
{ 59: }
  2,
{ 60: }
  3,
{ 61: }
{ 62: }
{ 63: }
{ 64: }
{ 65: }
{ 66: }
{ 67: }
{ 68: }
{ 69: }
{ 70: }
{ 71: }
{ 72: }
{ 73: }
{ 74: }
{ 75: }
{ 76: }
{ 77: }
{ 78: }
{ 79: }
  18,
{ 80: }
{ 81: }
{ 82: }
{ 83: }
{ 84: }
{ 85: }
{ 86: }
{ 87: }
{ 88: }
{ 89: }
{ 90: }
{ 91: }
{ 92: }
{ 93: }
  6,
{ 94: }
{ 95: }
{ 96: }
{ 97: }
{ 98: }
{ 99: }
{ 100: }
{ 101: }
{ 102: }
{ 103: }
{ 104: }
{ 105: }
{ 106: }
{ 107: }
{ 108: }
{ 109: }
{ 110: }
{ 111: }
{ 112: }
{ 113: }
{ 114: }
{ 115: }
{ 116: }
  4,
{ 117: }
{ 118: }
{ 119: }
{ 120: }
{ 121: }
{ 122: }
{ 123: }
  6,
{ 124: }
{ 125: }
{ 126: }
{ 127: }
{ 128: }
{ 129: }
{ 130: }
{ 131: }
{ 132: }
{ 133: }
{ 134: }
{ 135: }
{ 136: }
{ 137: }
{ 138: }
{ 139: }
{ 140: }
{ 141: }
{ 142: }
{ 143: }
{ 144: }
{ 145: }
{ 146: }
{ 147: }
{ 148: }
{ 149: }
{ 150: }
{ 151: }
{ 152: }
{ 153: }
{ 154: }
{ 155: }
{ 156: }
{ 157: }
  1,
{ 158: }
{ 159: }
{ 160: }
{ 161: }
{ 162: }
{ 163: }
{ 164: }
{ 165: }
{ 166: }
  5,
{ 167: }
{ 168: }
  6,
{ 169: }
{ 170: }
{ 171: }
{ 172: }
{ 173: }
{ 174: }
{ 175: }
{ 176: }
{ 177: }
{ 178: }
{ 179: }
{ 180: }
{ 181: }
{ 182: }
  10,
{ 183: }
{ 184: }
{ 185: }
{ 186: }
{ 187: }
{ 188: }
{ 189: }
{ 190: }
{ 191: }
{ 192: }
{ 193: }
{ 194: }
{ 195: }
{ 196: }
  22,
{ 197: }
{ 198: }
{ 199: }
{ 200: }
{ 201: }
{ 202: }
  2,
{ 203: }
  5,
{ 204: }
  6,
{ 205: }
{ 206: }
  14,
{ 207: }
{ 208: }
{ 209: }
{ 210: }
{ 211: }
{ 212: }
{ 213: }
  17,
{ 214: }
  19,
{ 215: }
{ 216: }
{ 217: }
{ 218: }
{ 219: }
{ 220: }
  9,
{ 221: }
{ 222: }
{ 223: }
{ 224: }
{ 225: }
  16,
{ 226: }
  20,
{ 227: }
{ 228: }
{ 229: }
  12,
{ 230: }
{ 231: }
  13,
{ 232: }
{ 233: }
{ 234: }
{ 235: }
{ 236: }
{ 237: }
{ 238: }
  15,
{ 239: }
{ 240: }
{ 241: }
{ 242: }
{ 243: }
{ 244: }
  8,
{ 245: }
{ 246: }
{ 247: }
{ 248: }
{ 249: }
{ 250: }
{ 251: }
{ 252: }
{ 253: }
{ 254: }
{ 255: }
{ 256: }
{ 257: }
{ 258: }
{ 259: }
{ 260: }
{ 261: }
  11,
{ 262: }
{ 263: }
{ 264: }
  7
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 1: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'9',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 2: }
  ( cc: [ #1..#9,#11,#12,#14..'9',';'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ ':' ]; s: 31),
{ 3: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'9',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ':' ]; s: 32),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 4: }
  ( cc: [ #1..#9,#11,#12,#14..'/',':'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ '0'..'9' ]; s: 33),
{ 5: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'/',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ '0'..'9' ]; s: 33),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 6: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 7: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'9',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 8: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 9: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'9',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 10: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 11: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..'9',';'..'B',
            'D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 12: }
  ( cc: [ #1..#9,#11,#12,#14..'/',':'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ '0'..'9' ]; s: 34),
{ 13: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'/',
            ';'..'B','D'..'R','T'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 27),
  ( cc: [ ' ' ]; s: 36),
  ( cc: [ '0'..'9' ]; s: 35),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
{ 14: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 15: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'9',
            ';'..'A','D','E','G'..'L','O','Q','R','U','V',
            'X'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 37),
  ( cc: [ ' ' ]; s: 41),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'B' ]; s: 39),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'F' ]; s: 43),
  ( cc: [ 'M' ]; s: 45),
  ( cc: [ 'N' ]; s: 44),
  ( cc: [ 'P' ]; s: 40),
  ( cc: [ 'S' ]; s: 38),
  ( cc: [ 'T' ]; s: 42),
  ( cc: [ 'W' ]; s: 46),
{ 16: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 17: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'9',
            ';'..'B','D','E','G'..'L','O'..'R','U','V',
            'X'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 47),
  ( cc: [ ' ' ]; s: 48),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'F' ]; s: 43),
  ( cc: [ 'M' ]; s: 45),
  ( cc: [ 'N' ]; s: 44),
  ( cc: [ 'S' ]; s: 38),
  ( cc: [ 'T' ]; s: 42),
  ( cc: [ 'W' ]; s: 46),
{ 18: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 19: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'9',
            ';'..'B','D','E','G'..'L','O'..'R','T'..'V',
            'X'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 49),
  ( cc: [ ' ' ]; s: 48),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'F' ]; s: 43),
  ( cc: [ 'M' ]; s: 45),
  ( cc: [ 'N' ]; s: 44),
  ( cc: [ 'S' ]; s: 38),
  ( cc: [ 'W' ]; s: 46),
{ 20: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 21: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'9',
            ';'..'B','D','E','G'..'L','O'..'R','T'..'V',
            'X'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 50),
  ( cc: [ ' ' ]; s: 48),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'F' ]; s: 43),
  ( cc: [ 'M' ]; s: 45),
  ( cc: [ 'N' ]; s: 44),
  ( cc: [ 'S' ]; s: 30),
  ( cc: [ 'W' ]; s: 46),
{ 22: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
{ 23: }
  ( cc: [ #1..#9,#11,#12,#14..#26,#28..#31,'!'..'9',
            ';'..'B','D'..'R','T'..'V','X'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 26),
  ( cc: [ #13 ]; s: 25),
  ( cc: [ #27 ]; s: 51),
  ( cc: [ ' ' ]; s: 48),
  ( cc: [ ':' ]; s: 29),
  ( cc: [ 'C' ]; s: 28),
  ( cc: [ 'S' ]; s: 30),
  ( cc: [ 'W' ]; s: 46),
{ 24: }
{ 25: }
  ( cc: [ #10 ]; s: 53),
  ( cc: [ #27 ]; s: 52),
{ 26: }
{ 27: }
  ( cc: [ '[' ]; s: 54),
{ 28: }
  ( cc: [ 'o' ]; s: 55),
{ 29: }
  ( cc: [ ' ' ]; s: 56),
{ 30: }
  ( cc: [ 'e' ]; s: 57),
{ 31: }
  ( cc: [ #27 ]; s: 58),
  ( cc: [ '[' ]; s: 59),
{ 32: }
  ( cc: [ #27 ]; s: 58),
  ( cc: [ ' ' ]; s: 56),
  ( cc: [ '[' ]; s: 59),
{ 33: }
  ( cc: [ '0'..'9' ]; s: 60),
{ 34: }
  ( cc: [ ' ' ]; s: 62),
  ( cc: [ '0'..'9' ]; s: 61),
{ 35: }
  ( cc: [ ' ' ]; s: 64),
  ( cc: [ '0'..'9' ]; s: 63),
{ 36: }
  ( cc: [ ' ' ]; s: 65),
  ( cc: [ '0'..'9' ]; s: 66),
{ 37: }
  ( cc: [ '[' ]; s: 67),
{ 38: }
  ( cc: [ 'e' ]; s: 57),
  ( cc: [ 'h' ]; s: 68),
{ 39: }
  ( cc: [ 'e' ]; s: 69),
{ 40: }
  ( cc: [ 'l' ]; s: 71),
  ( cc: [ 'o' ]; s: 70),
{ 41: }
  ( cc: [ ' ' ]; s: 72),
{ 42: }
  ( cc: [ 'r' ]; s: 73),
{ 43: }
  ( cc: [ 'i' ]; s: 74),
{ 44: }
  ( cc: [ 'a' ]; s: 75),
{ 45: }
  ( cc: [ 'i' ]; s: 76),
{ 46: }
  ( cc: [ 'a' ]; s: 77),
{ 47: }
  ( cc: [ '[' ]; s: 78),
{ 48: }
  ( cc: [ #1..#9,#11..#255 ]; s: 79),
{ 49: }
  ( cc: [ '[' ]; s: 80),
{ 50: }
  ( cc: [ '[' ]; s: 81),
{ 51: }
  ( cc: [ '[' ]; s: 82),
{ 52: }
  ( cc: [ '[' ]; s: 83),
{ 53: }
{ 54: }
  ( cc: [ '0'..'9' ]; s: 84),
{ 55: }
  ( cc: [ 'm' ]; s: 85),
{ 56: }
  ( cc: [ #13 ]; s: 86),
  ( cc: [ 'E' ]; s: 87),
{ 57: }
  ( cc: [ 'c' ]; s: 88),
{ 58: }
  ( cc: [ '[' ]; s: 89),
{ 59: }
  ( cc: [ #27 ]; s: 90),
{ 60: }
  ( cc: [ '0'..'9' ]; s: 60),
{ 61: }
  ( cc: [ ' ' ]; s: 62),
  ( cc: [ '0'..'9' ]; s: 61),
{ 62: }
  ( cc: [ '>' ]; s: 91),
{ 63: }
  ( cc: [ ' ' ]; s: 64),
  ( cc: [ '0'..'9' ]; s: 63),
{ 64: }
  ( cc: [ ' ' ]; s: 92),
  ( cc: [ '-' ]; s: 94),
  ( cc: [ '0'..'9' ]; s: 93),
  ( cc: [ '>' ]; s: 91),
{ 65: }
  ( cc: [ ' ' ]; s: 65),
  ( cc: [ '0'..'9' ]; s: 66),
{ 66: }
  ( cc: [ ' ' ]; s: 95),
  ( cc: [ '0'..'9' ]; s: 66),
{ 67: }
  ( cc: [ '0'..'9' ]; s: 96),
{ 68: }
  ( cc: [ 'i' ]; s: 97),
{ 69: }
  ( cc: [ 'a' ]; s: 98),
{ 70: }
  ( cc: [ 'r' ]; s: 99),
{ 71: }
  ( cc: [ 'a' ]; s: 100),
{ 72: }
  ( cc: [ ' ' ]; s: 101),
{ 73: }
  ( cc: [ 'a' ]; s: 102),
{ 74: }
  ( cc: [ 'g' ]; s: 103),
{ 75: }
  ( cc: [ 'v' ]; s: 104),
{ 76: }
  ( cc: [ 'n' ]; s: 105),
{ 77: }
  ( cc: [ 'r' ]; s: 106),
{ 78: }
  ( cc: [ '0'..'9' ]; s: 107),
{ 79: }
  ( cc: [ #1..#9,#11..#255 ]; s: 79),
{ 80: }
  ( cc: [ '0'..'9' ]; s: 108),
{ 81: }
  ( cc: [ '0'..'9' ]; s: 109),
{ 82: }
  ( cc: [ '0'..'9' ]; s: 110),
{ 83: }
  ( cc: [ '0'..'9' ]; s: 111),
{ 84: }
  ( cc: [ '0'..'9' ]; s: 112),
  ( cc: [ ';' ]; s: 113),
  ( cc: [ 'J','m' ]; s: 114),
{ 85: }
  ( cc: [ 'm' ]; s: 115),
{ 86: }
  ( cc: [ #10 ]; s: 116),
{ 87: }
  ( cc: [ 'N' ]; s: 117),
{ 88: }
  ( cc: [ 't' ]; s: 118),
{ 89: }
  ( cc: [ '0'..'9' ]; s: 119),
{ 90: }
  ( cc: [ '[' ]; s: 120),
{ 91: }
  ( cc: [ #13 ]; s: 121),
  ( cc: [ ' ' ]; s: 122),
{ 92: }
  ( cc: [ ' ' ]; s: 92),
  ( cc: [ '0'..'9' ]; s: 123),
{ 93: }
  ( cc: [ ' ' ]; s: 124),
  ( cc: [ '0'..'9' ]; s: 93),
{ 94: }
  ( cc: [ ' ' ]; s: 125),
{ 95: }
  ( cc: [ ' ' ]; s: 92),
  ( cc: [ '-' ]; s: 94),
  ( cc: [ '0'..'9' ]; s: 93),
{ 96: }
  ( cc: [ '0'..'9' ]; s: 126),
  ( cc: [ ';' ]; s: 127),
  ( cc: [ 'J','m' ]; s: 128),
{ 97: }
  ( cc: [ 'p' ]; s: 129),
{ 98: }
  ( cc: [ 'c' ]; s: 130),
{ 99: }
  ( cc: [ 't' ]; s: 131),
{ 100: }
  ( cc: [ 'n' ]; s: 132),
{ 101: }
  ( cc: [ ' ' ]; s: 133),
{ 102: }
  ( cc: [ 'd' ]; s: 134),
{ 103: }
  ( cc: [ 'h' ]; s: 135),
{ 104: }
  ( cc: [ 'H' ]; s: 136),
{ 105: }
  ( cc: [ 'e' ]; s: 137),
{ 106: }
  ( cc: [ 'p' ]; s: 138),
{ 107: }
  ( cc: [ '0'..'9' ]; s: 139),
  ( cc: [ ';' ]; s: 140),
  ( cc: [ 'J','m' ]; s: 141),
{ 108: }
  ( cc: [ '0'..'9' ]; s: 142),
  ( cc: [ ';' ]; s: 143),
  ( cc: [ 'J','m' ]; s: 144),
{ 109: }
  ( cc: [ '0'..'9' ]; s: 145),
  ( cc: [ ';' ]; s: 146),
  ( cc: [ 'J','m' ]; s: 147),
{ 110: }
  ( cc: [ '0'..'9' ]; s: 148),
  ( cc: [ ';' ]; s: 149),
  ( cc: [ 'J','m' ]; s: 150),
{ 111: }
  ( cc: [ '0'..'9' ]; s: 151),
  ( cc: [ ';' ]; s: 152),
  ( cc: [ 'J','m' ]; s: 153),
{ 112: }
  ( cc: [ ';' ]; s: 113),
  ( cc: [ 'J','m' ]; s: 114),
{ 113: }
  ( cc: [ '0'..'9' ]; s: 154),
{ 114: }
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'S' ]; s: 156),
{ 115: }
  ( cc: [ 'a' ]; s: 157),
{ 116: }
{ 117: }
  ( cc: [ 'D' ]; s: 158),
{ 118: }
  ( cc: [ 'o' ]; s: 159),
{ 119: }
  ( cc: [ '0'..'9' ]; s: 160),
  ( cc: [ ';' ]; s: 161),
  ( cc: [ 'J','m' ]; s: 162),
{ 120: }
  ( cc: [ '0'..'9' ]; s: 163),
{ 121: }
  ( cc: [ #10 ]; s: 164),
{ 122: }
  ( cc: [ '(' ]; s: 165),
  ( cc: [ '0'..'9' ]; s: 166),
{ 123: }
  ( cc: [ ' ' ]; s: 167),
  ( cc: [ '0'..'9' ]; s: 123),
{ 124: }
  ( cc: [ ' ' ]; s: 124),
  ( cc: [ '0'..'9' ]; s: 168),
{ 125: }
  ( cc: [ ' ' ]; s: 125),
  ( cc: [ '0'..'9' ]; s: 169),
{ 126: }
  ( cc: [ ';' ]; s: 127),
  ( cc: [ 'J','m' ]; s: 128),
{ 127: }
  ( cc: [ '0'..'9' ]; s: 170),
{ 128: }
  ( cc: [ ' ' ]; s: 174),
  ( cc: [ 'B' ]; s: 172),
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'F' ]; s: 176),
  ( cc: [ 'M' ]; s: 178),
  ( cc: [ 'N' ]; s: 177),
  ( cc: [ 'P' ]; s: 173),
  ( cc: [ 'S' ]; s: 171),
  ( cc: [ 'T' ]; s: 175),
  ( cc: [ 'W' ]; s: 179),
{ 129: }
  ( cc: [ 's' ]; s: 180),
{ 130: }
  ( cc: [ 'o' ]; s: 181),
{ 131: }
  ( cc: [ #1..#9,#11..#255 ]; s: 182),
{ 132: }
  ( cc: [ 'e' ]; s: 183),
{ 133: }
  ( cc: [ ' ' ]; s: 184),
{ 134: }
  ( cc: [ 'e' ]; s: 185),
{ 135: }
  ( cc: [ 't' ]; s: 186),
{ 136: }
  ( cc: [ 'a' ]; s: 187),
{ 137: }
  ( cc: [ 's' ]; s: 188),
{ 138: }
  ( cc: [ 's' ]; s: 189),
{ 139: }
  ( cc: [ ';' ]; s: 140),
  ( cc: [ 'J','m' ]; s: 141),
{ 140: }
  ( cc: [ '0'..'9' ]; s: 190),
{ 141: }
  ( cc: [ ' ' ]; s: 191),
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'F' ]; s: 176),
  ( cc: [ 'M' ]; s: 178),
  ( cc: [ 'N' ]; s: 177),
  ( cc: [ 'S' ]; s: 171),
  ( cc: [ 'T' ]; s: 175),
  ( cc: [ 'W' ]; s: 179),
{ 142: }
  ( cc: [ ';' ]; s: 143),
  ( cc: [ 'J','m' ]; s: 144),
{ 143: }
  ( cc: [ '0'..'9' ]; s: 192),
{ 144: }
  ( cc: [ ' ' ]; s: 191),
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'F' ]; s: 176),
  ( cc: [ 'M' ]; s: 178),
  ( cc: [ 'N' ]; s: 177),
  ( cc: [ 'S' ]; s: 171),
  ( cc: [ 'W' ]; s: 179),
{ 145: }
  ( cc: [ ';' ]; s: 146),
  ( cc: [ 'J','m' ]; s: 147),
{ 146: }
  ( cc: [ '0'..'9' ]; s: 193),
{ 147: }
  ( cc: [ ' ' ]; s: 191),
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'F' ]; s: 176),
  ( cc: [ 'M' ]; s: 178),
  ( cc: [ 'N' ]; s: 177),
  ( cc: [ 'S' ]; s: 156),
  ( cc: [ 'W' ]; s: 179),
{ 148: }
  ( cc: [ ';' ]; s: 149),
  ( cc: [ 'J','m' ]; s: 150),
{ 149: }
  ( cc: [ '0'..'9' ]; s: 194),
{ 150: }
  ( cc: [ ' ' ]; s: 191),
  ( cc: [ 'C' ]; s: 155),
  ( cc: [ 'S' ]; s: 156),
  ( cc: [ 'W' ]; s: 179),
{ 151: }
  ( cc: [ ';' ]; s: 152),
  ( cc: [ 'J','m' ]; s: 153),
{ 152: }
  ( cc: [ '0'..'9' ]; s: 195),
{ 153: }
  ( cc: [ #10 ]; s: 196),
{ 154: }
  ( cc: [ '0'..'9' ]; s: 112),
  ( cc: [ ';' ]; s: 113),
  ( cc: [ 'J','m' ]; s: 114),
{ 155: }
  ( cc: [ 'o' ]; s: 55),
{ 156: }
  ( cc: [ 'e' ]; s: 57),
{ 157: }
{ 158: }
  ( cc: [ 'I' ]; s: 197),
{ 159: }
  ( cc: [ 'r' ]; s: 198),
{ 160: }
  ( cc: [ ';' ]; s: 161),
  ( cc: [ 'J','m' ]; s: 162),
{ 161: }
  ( cc: [ '0'..'9' ]; s: 199),
{ 162: }
  ( cc: [ '[' ]; s: 59),
{ 163: }
  ( cc: [ '0'..'9' ]; s: 200),
  ( cc: [ ';' ]; s: 201),
  ( cc: [ 'J','m' ]; s: 202),
{ 164: }
  ( cc: [ ' ' ]; s: 122),
{ 165: }
  ( cc: [ '0'..'9' ]; s: 166),
{ 166: }
  ( cc: [ ' ' ]; s: 62),
  ( cc: [ ')' ]; s: 203),
  ( cc: [ '0'..'9' ]; s: 166),
{ 167: }
  ( cc: [ ' ' ]; s: 167),
  ( cc: [ '0'..'9' ]; s: 204),
{ 168: }
  ( cc: [ ' ' ]; s: 124),
  ( cc: [ '0'..'9' ]; s: 168),
{ 169: }
  ( cc: [ ' ' ]; s: 205),
  ( cc: [ '0'..'9' ]; s: 169),
{ 170: }
  ( cc: [ '0'..'9' ]; s: 126),
  ( cc: [ ';' ]; s: 127),
  ( cc: [ 'J','m' ]; s: 128),
{ 171: }
  ( cc: [ 'e' ]; s: 57),
  ( cc: [ 'h' ]; s: 68),
{ 172: }
  ( cc: [ 'e' ]; s: 69),
{ 173: }
  ( cc: [ 'l' ]; s: 71),
  ( cc: [ 'o' ]; s: 70),
{ 174: }
  ( cc: [ ' ' ]; s: 72),
{ 175: }
  ( cc: [ 'r' ]; s: 73),
{ 176: }
  ( cc: [ 'i' ]; s: 74),
{ 177: }
  ( cc: [ 'a' ]; s: 75),
{ 178: }
  ( cc: [ 'i' ]; s: 76),
{ 179: }
  ( cc: [ 'a' ]; s: 77),
{ 180: }
  ( cc: [ #1..#9,#11..#255 ]; s: 206),
{ 181: }
  ( cc: [ 'n' ]; s: 207),
{ 182: }
  ( cc: [ #1..#9,#11..#255 ]; s: 182),
{ 183: }
  ( cc: [ 't' ]; s: 208),
{ 184: }
  ( cc: [ ' ' ]; s: 209),
{ 185: }
  ( cc: [ 'r' ]; s: 210),
{ 186: }
  ( cc: [ 'e' ]; s: 211),
{ 187: }
  ( cc: [ 'z' ]; s: 212),
{ 188: }
  ( cc: [ #1..#9,#11..#255 ]; s: 213),
{ 189: }
  ( cc: [ #1..#9,#11..#255 ]; s: 214),
{ 190: }
  ( cc: [ '0'..'9' ]; s: 139),
  ( cc: [ ';' ]; s: 140),
  ( cc: [ 'J','m' ]; s: 141),
{ 191: }
  ( cc: [ #1..#9,#11..#255 ]; s: 79),
{ 192: }
  ( cc: [ '0'..'9' ]; s: 142),
  ( cc: [ ';' ]; s: 143),
  ( cc: [ 'J','m' ]; s: 144),
{ 193: }
  ( cc: [ '0'..'9' ]; s: 145),
  ( cc: [ ';' ]; s: 146),
  ( cc: [ 'J','m' ]; s: 147),
{ 194: }
  ( cc: [ '0'..'9' ]; s: 148),
  ( cc: [ ';' ]; s: 149),
  ( cc: [ 'J','m' ]; s: 150),
{ 195: }
  ( cc: [ '0'..'9' ]; s: 151),
  ( cc: [ ';' ]; s: 152),
  ( cc: [ 'J','m' ]; s: 153),
{ 196: }
{ 197: }
  ( cc: [ 'N' ]; s: 215),
{ 198: }
  ( cc: [ ' ' ]; s: 216),
{ 199: }
  ( cc: [ '0'..'9' ]; s: 160),
  ( cc: [ ';' ]; s: 161),
  ( cc: [ 'J','m' ]; s: 162),
{ 200: }
  ( cc: [ ';' ]; s: 201),
  ( cc: [ 'J','m' ]; s: 202),
{ 201: }
  ( cc: [ '0'..'9' ]; s: 217),
{ 202: }
{ 203: }
  ( cc: [ ' ' ]; s: 62),
{ 204: }
  ( cc: [ ' ' ]; s: 124),
  ( cc: [ '%' ]; s: 218),
  ( cc: [ '0'..'9' ]; s: 204),
{ 205: }
  ( cc: [ ' ' ]; s: 205),
  ( cc: [ '0'..'9' ]; s: 219),
{ 206: }
  ( cc: [ #1..#9,#11..#255 ]; s: 206),
{ 207: }
  ( cc: [ #1..#9,#11..#255 ]; s: 220),
{ 208: }
  ( cc: [ 's' ]; s: 221),
{ 209: }
  ( cc: [ ' ' ]; s: 222),
{ 210: }
  ( cc: [ 's' ]; s: 223),
{ 211: }
  ( cc: [ 'r' ]; s: 224),
{ 212: }
  ( cc: [ #1..#9,#11..#255 ]; s: 225),
{ 213: }
  ( cc: [ #1..#9,#11..#255 ]; s: 213),
{ 214: }
  ( cc: [ #1..#9,#11..#255 ]; s: 214),
{ 215: }
  ( cc: [ 'T' ]; s: 226),
{ 216: }
  ( cc: [ ' ' ]; s: 227),
{ 217: }
  ( cc: [ '0'..'9' ]; s: 200),
  ( cc: [ ';' ]; s: 201),
  ( cc: [ 'J','m' ]; s: 202),
{ 218: }
  ( cc: [ ' ' ]; s: 228),
{ 219: }
  ( cc: [ '%' ]; s: 218),
  ( cc: [ '0'..'9' ]; s: 219),
{ 220: }
  ( cc: [ #1..#9,#11..#255 ]; s: 220),
{ 221: }
  ( cc: [ #1..#9,#11..#255 ]; s: 229),
{ 222: }
  ( cc: [ ' ' ]; s: 230),
{ 223: }
  ( cc: [ #1..#9,#11..#255 ]; s: 231),
{ 224: }
  ( cc: [ 's' ]; s: 232),
{ 225: }
  ( cc: [ #1..#9,#11..#255 ]; s: 225),
{ 226: }
{ 227: }
  ( cc: [ #27 ]; s: 233),
  ( cc: [ ':' ]; s: 234),
{ 228: }
  ( cc: [ ' ' ]; s: 236),
  ( cc: [ '-' ]; s: 235),
{ 229: }
  ( cc: [ #1..#9,#11..#255 ]; s: 229),
{ 230: }
  ( cc: [ ' ' ]; s: 237),
{ 231: }
  ( cc: [ #1..#9,#11..#255 ]; s: 231),
{ 232: }
  ( cc: [ #1..#9,#11..#255 ]; s: 238),
{ 233: }
  ( cc: [ '[' ]; s: 239),
{ 234: }
  ( cc: [ #1..#9,#11..#255 ]; s: 240),
{ 235: }
  ( cc: [ ' ' ]; s: 236),
{ 236: }
  ( cc: [ ' ' ]; s: 236),
  ( cc: [ '0'..'9' ]; s: 241),
{ 237: }
  ( cc: [ ' ' ]; s: 242),
{ 238: }
  ( cc: [ #1..#9,#11..#255 ]; s: 238),
{ 239: }
  ( cc: [ '0'..'9' ]; s: 243),
{ 240: }
  ( cc: [ #1..#9,#11..'-','/'..#255 ]; s: 240),
  ( cc: [ '.' ]; s: 244),
{ 241: }
  ( cc: [ ' ' ]; s: 245),
  ( cc: [ '0'..'9' ]; s: 241),
{ 242: }
  ( cc: [ ' ' ]; s: 246),
{ 243: }
  ( cc: [ '0'..'9' ]; s: 247),
  ( cc: [ ';' ]; s: 248),
  ( cc: [ 'J','m' ]; s: 249),
{ 244: }
  ( cc: [ #1..#9,#11..'-','/'..#255 ]; s: 240),
  ( cc: [ '.' ]; s: 244),
{ 245: }
  ( cc: [ ' ' ]; s: 245),
  ( cc: [ '0'..'9' ]; s: 250),
{ 246: }
  ( cc: [ '(' ]; s: 251),
{ 247: }
  ( cc: [ ';' ]; s: 248),
  ( cc: [ 'J','m' ]; s: 249),
{ 248: }
  ( cc: [ '0'..'9' ]; s: 252),
{ 249: }
  ( cc: [ ':' ]; s: 234),
{ 250: }
  ( cc: [ '%' ]; s: 253),
  ( cc: [ '0'..'9' ]; s: 250),
{ 251: }
  ( cc: [ 'U' ]; s: 254),
{ 252: }
  ( cc: [ '0'..'9' ]; s: 247),
  ( cc: [ ';' ]; s: 248),
  ( cc: [ 'J','m' ]; s: 249),
{ 253: }
  ( cc: [ ' ' ]; s: 255),
{ 254: }
  ( cc: [ 'n' ]; s: 256),
{ 255: }
  ( cc: [ ' ' ]; s: 258),
  ( cc: [ '-' ]; s: 257),
{ 256: }
  ( cc: [ #1..#9,#11..#255 ]; s: 259),
{ 257: }
  ( cc: [ ' ' ]; s: 258),
{ 258: }
  ( cc: [ ' ' ]; s: 258),
  ( cc: [ '0'..'9' ]; s: 260),
{ 259: }
  ( cc: [ #1..#9,#11..'/',':'..#255 ]; s: 259),
  ( cc: [ '0'..'9' ]; s: 261),
{ 260: }
  ( cc: [ ' ' ]; s: 262),
  ( cc: [ '0'..'9' ]; s: 260),
{ 261: }
  ( cc: [ #1..#9,#11..'/',':'..#255 ]; s: 259),
  ( cc: [ '0'..'9' ]; s: 261),
{ 262: }
  ( cc: [ ' ' ]; s: 262),
  ( cc: [ '0'..'9' ]; s: 263),
{ 263: }
  ( cc: [ '%' ]; s: 264),
  ( cc: [ '0'..'9' ]; s: 263)
{ 264: }
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 1,
{ 12: } 1,
{ 13: } 1,
{ 14: } 1,
{ 15: } 1,
{ 16: } 1,
{ 17: } 1,
{ 18: } 1,
{ 19: } 1,
{ 20: } 1,
{ 21: } 1,
{ 22: } 1,
{ 23: } 1,
{ 24: } 1,
{ 25: } 2,
{ 26: } 4,
{ 27: } 5,
{ 28: } 6,
{ 29: } 7,
{ 30: } 8,
{ 31: } 9,
{ 32: } 10,
{ 33: } 11,
{ 34: } 13,
{ 35: } 14,
{ 36: } 15,
{ 37: } 16,
{ 38: } 17,
{ 39: } 18,
{ 40: } 19,
{ 41: } 20,
{ 42: } 21,
{ 43: } 22,
{ 44: } 23,
{ 45: } 24,
{ 46: } 25,
{ 47: } 26,
{ 48: } 27,
{ 49: } 28,
{ 50: } 29,
{ 51: } 30,
{ 52: } 31,
{ 53: } 31,
{ 54: } 32,
{ 55: } 32,
{ 56: } 32,
{ 57: } 32,
{ 58: } 32,
{ 59: } 32,
{ 60: } 33,
{ 61: } 34,
{ 62: } 34,
{ 63: } 34,
{ 64: } 34,
{ 65: } 34,
{ 66: } 34,
{ 67: } 34,
{ 68: } 34,
{ 69: } 34,
{ 70: } 34,
{ 71: } 34,
{ 72: } 34,
{ 73: } 34,
{ 74: } 34,
{ 75: } 34,
{ 76: } 34,
{ 77: } 34,
{ 78: } 34,
{ 79: } 34,
{ 80: } 35,
{ 81: } 35,
{ 82: } 35,
{ 83: } 35,
{ 84: } 35,
{ 85: } 35,
{ 86: } 35,
{ 87: } 35,
{ 88: } 35,
{ 89: } 35,
{ 90: } 35,
{ 91: } 35,
{ 92: } 35,
{ 93: } 35,
{ 94: } 36,
{ 95: } 36,
{ 96: } 36,
{ 97: } 36,
{ 98: } 36,
{ 99: } 36,
{ 100: } 36,
{ 101: } 36,
{ 102: } 36,
{ 103: } 36,
{ 104: } 36,
{ 105: } 36,
{ 106: } 36,
{ 107: } 36,
{ 108: } 36,
{ 109: } 36,
{ 110: } 36,
{ 111: } 36,
{ 112: } 36,
{ 113: } 36,
{ 114: } 36,
{ 115: } 36,
{ 116: } 36,
{ 117: } 37,
{ 118: } 37,
{ 119: } 37,
{ 120: } 37,
{ 121: } 37,
{ 122: } 37,
{ 123: } 37,
{ 124: } 38,
{ 125: } 38,
{ 126: } 38,
{ 127: } 38,
{ 128: } 38,
{ 129: } 38,
{ 130: } 38,
{ 131: } 38,
{ 132: } 38,
{ 133: } 38,
{ 134: } 38,
{ 135: } 38,
{ 136: } 38,
{ 137: } 38,
{ 138: } 38,
{ 139: } 38,
{ 140: } 38,
{ 141: } 38,
{ 142: } 38,
{ 143: } 38,
{ 144: } 38,
{ 145: } 38,
{ 146: } 38,
{ 147: } 38,
{ 148: } 38,
{ 149: } 38,
{ 150: } 38,
{ 151: } 38,
{ 152: } 38,
{ 153: } 38,
{ 154: } 38,
{ 155: } 38,
{ 156: } 38,
{ 157: } 38,
{ 158: } 39,
{ 159: } 39,
{ 160: } 39,
{ 161: } 39,
{ 162: } 39,
{ 163: } 39,
{ 164: } 39,
{ 165: } 39,
{ 166: } 39,
{ 167: } 40,
{ 168: } 40,
{ 169: } 41,
{ 170: } 41,
{ 171: } 41,
{ 172: } 41,
{ 173: } 41,
{ 174: } 41,
{ 175: } 41,
{ 176: } 41,
{ 177: } 41,
{ 178: } 41,
{ 179: } 41,
{ 180: } 41,
{ 181: } 41,
{ 182: } 41,
{ 183: } 42,
{ 184: } 42,
{ 185: } 42,
{ 186: } 42,
{ 187: } 42,
{ 188: } 42,
{ 189: } 42,
{ 190: } 42,
{ 191: } 42,
{ 192: } 42,
{ 193: } 42,
{ 194: } 42,
{ 195: } 42,
{ 196: } 42,
{ 197: } 43,
{ 198: } 43,
{ 199: } 43,
{ 200: } 43,
{ 201: } 43,
{ 202: } 43,
{ 203: } 44,
{ 204: } 45,
{ 205: } 46,
{ 206: } 46,
{ 207: } 47,
{ 208: } 47,
{ 209: } 47,
{ 210: } 47,
{ 211: } 47,
{ 212: } 47,
{ 213: } 47,
{ 214: } 48,
{ 215: } 49,
{ 216: } 49,
{ 217: } 49,
{ 218: } 49,
{ 219: } 49,
{ 220: } 49,
{ 221: } 50,
{ 222: } 50,
{ 223: } 50,
{ 224: } 50,
{ 225: } 50,
{ 226: } 51,
{ 227: } 52,
{ 228: } 52,
{ 229: } 52,
{ 230: } 53,
{ 231: } 53,
{ 232: } 54,
{ 233: } 54,
{ 234: } 54,
{ 235: } 54,
{ 236: } 54,
{ 237: } 54,
{ 238: } 54,
{ 239: } 55,
{ 240: } 55,
{ 241: } 55,
{ 242: } 55,
{ 243: } 55,
{ 244: } 55,
{ 245: } 56,
{ 246: } 56,
{ 247: } 56,
{ 248: } 56,
{ 249: } 56,
{ 250: } 56,
{ 251: } 56,
{ 252: } 56,
{ 253: } 56,
{ 254: } 56,
{ 255: } 56,
{ 256: } 56,
{ 257: } 56,
{ 258: } 56,
{ 259: } 56,
{ 260: } 56,
{ 261: } 56,
{ 262: } 57,
{ 263: } 57,
{ 264: } 57
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 0,
{ 11: } 0,
{ 12: } 0,
{ 13: } 0,
{ 14: } 0,
{ 15: } 0,
{ 16: } 0,
{ 17: } 0,
{ 18: } 0,
{ 19: } 0,
{ 20: } 0,
{ 21: } 0,
{ 22: } 0,
{ 23: } 0,
{ 24: } 1,
{ 25: } 3,
{ 26: } 4,
{ 27: } 5,
{ 28: } 6,
{ 29: } 7,
{ 30: } 8,
{ 31: } 9,
{ 32: } 10,
{ 33: } 12,
{ 34: } 13,
{ 35: } 14,
{ 36: } 15,
{ 37: } 16,
{ 38: } 17,
{ 39: } 18,
{ 40: } 19,
{ 41: } 20,
{ 42: } 21,
{ 43: } 22,
{ 44: } 23,
{ 45: } 24,
{ 46: } 25,
{ 47: } 26,
{ 48: } 27,
{ 49: } 28,
{ 50: } 29,
{ 51: } 30,
{ 52: } 30,
{ 53: } 31,
{ 54: } 31,
{ 55: } 31,
{ 56: } 31,
{ 57: } 31,
{ 58: } 31,
{ 59: } 32,
{ 60: } 33,
{ 61: } 33,
{ 62: } 33,
{ 63: } 33,
{ 64: } 33,
{ 65: } 33,
{ 66: } 33,
{ 67: } 33,
{ 68: } 33,
{ 69: } 33,
{ 70: } 33,
{ 71: } 33,
{ 72: } 33,
{ 73: } 33,
{ 74: } 33,
{ 75: } 33,
{ 76: } 33,
{ 77: } 33,
{ 78: } 33,
{ 79: } 34,
{ 80: } 34,
{ 81: } 34,
{ 82: } 34,
{ 83: } 34,
{ 84: } 34,
{ 85: } 34,
{ 86: } 34,
{ 87: } 34,
{ 88: } 34,
{ 89: } 34,
{ 90: } 34,
{ 91: } 34,
{ 92: } 34,
{ 93: } 35,
{ 94: } 35,
{ 95: } 35,
{ 96: } 35,
{ 97: } 35,
{ 98: } 35,
{ 99: } 35,
{ 100: } 35,
{ 101: } 35,
{ 102: } 35,
{ 103: } 35,
{ 104: } 35,
{ 105: } 35,
{ 106: } 35,
{ 107: } 35,
{ 108: } 35,
{ 109: } 35,
{ 110: } 35,
{ 111: } 35,
{ 112: } 35,
{ 113: } 35,
{ 114: } 35,
{ 115: } 35,
{ 116: } 36,
{ 117: } 36,
{ 118: } 36,
{ 119: } 36,
{ 120: } 36,
{ 121: } 36,
{ 122: } 36,
{ 123: } 37,
{ 124: } 37,
{ 125: } 37,
{ 126: } 37,
{ 127: } 37,
{ 128: } 37,
{ 129: } 37,
{ 130: } 37,
{ 131: } 37,
{ 132: } 37,
{ 133: } 37,
{ 134: } 37,
{ 135: } 37,
{ 136: } 37,
{ 137: } 37,
{ 138: } 37,
{ 139: } 37,
{ 140: } 37,
{ 141: } 37,
{ 142: } 37,
{ 143: } 37,
{ 144: } 37,
{ 145: } 37,
{ 146: } 37,
{ 147: } 37,
{ 148: } 37,
{ 149: } 37,
{ 150: } 37,
{ 151: } 37,
{ 152: } 37,
{ 153: } 37,
{ 154: } 37,
{ 155: } 37,
{ 156: } 37,
{ 157: } 38,
{ 158: } 38,
{ 159: } 38,
{ 160: } 38,
{ 161: } 38,
{ 162: } 38,
{ 163: } 38,
{ 164: } 38,
{ 165: } 38,
{ 166: } 39,
{ 167: } 39,
{ 168: } 40,
{ 169: } 40,
{ 170: } 40,
{ 171: } 40,
{ 172: } 40,
{ 173: } 40,
{ 174: } 40,
{ 175: } 40,
{ 176: } 40,
{ 177: } 40,
{ 178: } 40,
{ 179: } 40,
{ 180: } 40,
{ 181: } 40,
{ 182: } 41,
{ 183: } 41,
{ 184: } 41,
{ 185: } 41,
{ 186: } 41,
{ 187: } 41,
{ 188: } 41,
{ 189: } 41,
{ 190: } 41,
{ 191: } 41,
{ 192: } 41,
{ 193: } 41,
{ 194: } 41,
{ 195: } 41,
{ 196: } 42,
{ 197: } 42,
{ 198: } 42,
{ 199: } 42,
{ 200: } 42,
{ 201: } 42,
{ 202: } 43,
{ 203: } 44,
{ 204: } 45,
{ 205: } 45,
{ 206: } 46,
{ 207: } 46,
{ 208: } 46,
{ 209: } 46,
{ 210: } 46,
{ 211: } 46,
{ 212: } 46,
{ 213: } 47,
{ 214: } 48,
{ 215: } 48,
{ 216: } 48,
{ 217: } 48,
{ 218: } 48,
{ 219: } 48,
{ 220: } 49,
{ 221: } 49,
{ 222: } 49,
{ 223: } 49,
{ 224: } 49,
{ 225: } 50,
{ 226: } 51,
{ 227: } 51,
{ 228: } 51,
{ 229: } 52,
{ 230: } 52,
{ 231: } 53,
{ 232: } 53,
{ 233: } 53,
{ 234: } 53,
{ 235: } 53,
{ 236: } 53,
{ 237: } 53,
{ 238: } 54,
{ 239: } 54,
{ 240: } 54,
{ 241: } 54,
{ 242: } 54,
{ 243: } 54,
{ 244: } 55,
{ 245: } 55,
{ 246: } 55,
{ 247: } 55,
{ 248: } 55,
{ 249: } 55,
{ 250: } 55,
{ 251: } 55,
{ 252: } 55,
{ 253: } 55,
{ 254: } 55,
{ 255: } 55,
{ 256: } 55,
{ 257: } 55,
{ 258: } 55,
{ 259: } 55,
{ 260: } 55,
{ 261: } 56,
{ 262: } 56,
{ 263: } 56,
{ 264: } 57
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 1,
{ 12: } 1,
{ 13: } 1,
{ 14: } 1,
{ 15: } 1,
{ 16: } 1,
{ 17: } 1,
{ 18: } 1,
{ 19: } 1,
{ 20: } 1,
{ 21: } 1,
{ 22: } 1,
{ 23: } 1,
{ 24: } 1,
{ 25: } 2,
{ 26: } 4,
{ 27: } 5,
{ 28: } 6,
{ 29: } 7,
{ 30: } 8,
{ 31: } 9,
{ 32: } 10,
{ 33: } 11,
{ 34: } 13,
{ 35: } 14,
{ 36: } 15,
{ 37: } 16,
{ 38: } 17,
{ 39: } 18,
{ 40: } 19,
{ 41: } 20,
{ 42: } 21,
{ 43: } 22,
{ 44: } 23,
{ 45: } 24,
{ 46: } 25,
{ 47: } 26,
{ 48: } 27,
{ 49: } 28,
{ 50: } 29,
{ 51: } 30,
{ 52: } 31,
{ 53: } 31,
{ 54: } 32,
{ 55: } 32,
{ 56: } 32,
{ 57: } 32,
{ 58: } 32,
{ 59: } 32,
{ 60: } 33,
{ 61: } 34,
{ 62: } 34,
{ 63: } 34,
{ 64: } 34,
{ 65: } 34,
{ 66: } 34,
{ 67: } 34,
{ 68: } 34,
{ 69: } 34,
{ 70: } 34,
{ 71: } 34,
{ 72: } 34,
{ 73: } 34,
{ 74: } 34,
{ 75: } 34,
{ 76: } 34,
{ 77: } 34,
{ 78: } 34,
{ 79: } 34,
{ 80: } 35,
{ 81: } 35,
{ 82: } 35,
{ 83: } 35,
{ 84: } 35,
{ 85: } 35,
{ 86: } 35,
{ 87: } 35,
{ 88: } 35,
{ 89: } 35,
{ 90: } 35,
{ 91: } 35,
{ 92: } 35,
{ 93: } 35,
{ 94: } 36,
{ 95: } 36,
{ 96: } 36,
{ 97: } 36,
{ 98: } 36,
{ 99: } 36,
{ 100: } 36,
{ 101: } 36,
{ 102: } 36,
{ 103: } 36,
{ 104: } 36,
{ 105: } 36,
{ 106: } 36,
{ 107: } 36,
{ 108: } 36,
{ 109: } 36,
{ 110: } 36,
{ 111: } 36,
{ 112: } 36,
{ 113: } 36,
{ 114: } 36,
{ 115: } 36,
{ 116: } 36,
{ 117: } 37,
{ 118: } 37,
{ 119: } 37,
{ 120: } 37,
{ 121: } 37,
{ 122: } 37,
{ 123: } 37,
{ 124: } 38,
{ 125: } 38,
{ 126: } 38,
{ 127: } 38,
{ 128: } 38,
{ 129: } 38,
{ 130: } 38,
{ 131: } 38,
{ 132: } 38,
{ 133: } 38,
{ 134: } 38,
{ 135: } 38,
{ 136: } 38,
{ 137: } 38,
{ 138: } 38,
{ 139: } 38,
{ 140: } 38,
{ 141: } 38,
{ 142: } 38,
{ 143: } 38,
{ 144: } 38,
{ 145: } 38,
{ 146: } 38,
{ 147: } 38,
{ 148: } 38,
{ 149: } 38,
{ 150: } 38,
{ 151: } 38,
{ 152: } 38,
{ 153: } 38,
{ 154: } 38,
{ 155: } 38,
{ 156: } 38,
{ 157: } 38,
{ 158: } 39,
{ 159: } 39,
{ 160: } 39,
{ 161: } 39,
{ 162: } 39,
{ 163: } 39,
{ 164: } 39,
{ 165: } 39,
{ 166: } 39,
{ 167: } 40,
{ 168: } 40,
{ 169: } 41,
{ 170: } 41,
{ 171: } 41,
{ 172: } 41,
{ 173: } 41,
{ 174: } 41,
{ 175: } 41,
{ 176: } 41,
{ 177: } 41,
{ 178: } 41,
{ 179: } 41,
{ 180: } 41,
{ 181: } 41,
{ 182: } 41,
{ 183: } 42,
{ 184: } 42,
{ 185: } 42,
{ 186: } 42,
{ 187: } 42,
{ 188: } 42,
{ 189: } 42,
{ 190: } 42,
{ 191: } 42,
{ 192: } 42,
{ 193: } 42,
{ 194: } 42,
{ 195: } 42,
{ 196: } 42,
{ 197: } 43,
{ 198: } 43,
{ 199: } 43,
{ 200: } 43,
{ 201: } 43,
{ 202: } 43,
{ 203: } 44,
{ 204: } 45,
{ 205: } 46,
{ 206: } 46,
{ 207: } 47,
{ 208: } 47,
{ 209: } 47,
{ 210: } 47,
{ 211: } 47,
{ 212: } 47,
{ 213: } 47,
{ 214: } 48,
{ 215: } 49,
{ 216: } 49,
{ 217: } 49,
{ 218: } 49,
{ 219: } 49,
{ 220: } 49,
{ 221: } 50,
{ 222: } 50,
{ 223: } 50,
{ 224: } 50,
{ 225: } 50,
{ 226: } 51,
{ 227: } 52,
{ 228: } 52,
{ 229: } 52,
{ 230: } 53,
{ 231: } 53,
{ 232: } 54,
{ 233: } 54,
{ 234: } 54,
{ 235: } 54,
{ 236: } 54,
{ 237: } 54,
{ 238: } 54,
{ 239: } 55,
{ 240: } 55,
{ 241: } 55,
{ 242: } 55,
{ 243: } 55,
{ 244: } 55,
{ 245: } 56,
{ 246: } 56,
{ 247: } 56,
{ 248: } 56,
{ 249: } 56,
{ 250: } 56,
{ 251: } 56,
{ 252: } 56,
{ 253: } 56,
{ 254: } 56,
{ 255: } 56,
{ 256: } 56,
{ 257: } 56,
{ 258: } 56,
{ 259: } 56,
{ 260: } 56,
{ 261: } 56,
{ 262: } 57,
{ 263: } 57,
{ 264: } 57
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 0,
{ 11: } 0,
{ 12: } 0,
{ 13: } 0,
{ 14: } 0,
{ 15: } 0,
{ 16: } 0,
{ 17: } 0,
{ 18: } 0,
{ 19: } 0,
{ 20: } 0,
{ 21: } 0,
{ 22: } 0,
{ 23: } 0,
{ 24: } 1,
{ 25: } 3,
{ 26: } 4,
{ 27: } 5,
{ 28: } 6,
{ 29: } 7,
{ 30: } 8,
{ 31: } 9,
{ 32: } 10,
{ 33: } 12,
{ 34: } 13,
{ 35: } 14,
{ 36: } 15,
{ 37: } 16,
{ 38: } 17,
{ 39: } 18,
{ 40: } 19,
{ 41: } 20,
{ 42: } 21,
{ 43: } 22,
{ 44: } 23,
{ 45: } 24,
{ 46: } 25,
{ 47: } 26,
{ 48: } 27,
{ 49: } 28,
{ 50: } 29,
{ 51: } 30,
{ 52: } 30,
{ 53: } 31,
{ 54: } 31,
{ 55: } 31,
{ 56: } 31,
{ 57: } 31,
{ 58: } 31,
{ 59: } 32,
{ 60: } 33,
{ 61: } 33,
{ 62: } 33,
{ 63: } 33,
{ 64: } 33,
{ 65: } 33,
{ 66: } 33,
{ 67: } 33,
{ 68: } 33,
{ 69: } 33,
{ 70: } 33,
{ 71: } 33,
{ 72: } 33,
{ 73: } 33,
{ 74: } 33,
{ 75: } 33,
{ 76: } 33,
{ 77: } 33,
{ 78: } 33,
{ 79: } 34,
{ 80: } 34,
{ 81: } 34,
{ 82: } 34,
{ 83: } 34,
{ 84: } 34,
{ 85: } 34,
{ 86: } 34,
{ 87: } 34,
{ 88: } 34,
{ 89: } 34,
{ 90: } 34,
{ 91: } 34,
{ 92: } 34,
{ 93: } 35,
{ 94: } 35,
{ 95: } 35,
{ 96: } 35,
{ 97: } 35,
{ 98: } 35,
{ 99: } 35,
{ 100: } 35,
{ 101: } 35,
{ 102: } 35,
{ 103: } 35,
{ 104: } 35,
{ 105: } 35,
{ 106: } 35,
{ 107: } 35,
{ 108: } 35,
{ 109: } 35,
{ 110: } 35,
{ 111: } 35,
{ 112: } 35,
{ 113: } 35,
{ 114: } 35,
{ 115: } 35,
{ 116: } 36,
{ 117: } 36,
{ 118: } 36,
{ 119: } 36,
{ 120: } 36,
{ 121: } 36,
{ 122: } 36,
{ 123: } 37,
{ 124: } 37,
{ 125: } 37,
{ 126: } 37,
{ 127: } 37,
{ 128: } 37,
{ 129: } 37,
{ 130: } 37,
{ 131: } 37,
{ 132: } 37,
{ 133: } 37,
{ 134: } 37,
{ 135: } 37,
{ 136: } 37,
{ 137: } 37,
{ 138: } 37,
{ 139: } 37,
{ 140: } 37,
{ 141: } 37,
{ 142: } 37,
{ 143: } 37,
{ 144: } 37,
{ 145: } 37,
{ 146: } 37,
{ 147: } 37,
{ 148: } 37,
{ 149: } 37,
{ 150: } 37,
{ 151: } 37,
{ 152: } 37,
{ 153: } 37,
{ 154: } 37,
{ 155: } 37,
{ 156: } 37,
{ 157: } 38,
{ 158: } 38,
{ 159: } 38,
{ 160: } 38,
{ 161: } 38,
{ 162: } 38,
{ 163: } 38,
{ 164: } 38,
{ 165: } 38,
{ 166: } 39,
{ 167: } 39,
{ 168: } 40,
{ 169: } 40,
{ 170: } 40,
{ 171: } 40,
{ 172: } 40,
{ 173: } 40,
{ 174: } 40,
{ 175: } 40,
{ 176: } 40,
{ 177: } 40,
{ 178: } 40,
{ 179: } 40,
{ 180: } 40,
{ 181: } 40,
{ 182: } 41,
{ 183: } 41,
{ 184: } 41,
{ 185: } 41,
{ 186: } 41,
{ 187: } 41,
{ 188: } 41,
{ 189: } 41,
{ 190: } 41,
{ 191: } 41,
{ 192: } 41,
{ 193: } 41,
{ 194: } 41,
{ 195: } 41,
{ 196: } 42,
{ 197: } 42,
{ 198: } 42,
{ 199: } 42,
{ 200: } 42,
{ 201: } 42,
{ 202: } 43,
{ 203: } 44,
{ 204: } 45,
{ 205: } 45,
{ 206: } 46,
{ 207: } 46,
{ 208: } 46,
{ 209: } 46,
{ 210: } 46,
{ 211: } 46,
{ 212: } 46,
{ 213: } 47,
{ 214: } 48,
{ 215: } 48,
{ 216: } 48,
{ 217: } 48,
{ 218: } 48,
{ 219: } 48,
{ 220: } 49,
{ 221: } 49,
{ 222: } 49,
{ 223: } 49,
{ 224: } 49,
{ 225: } 50,
{ 226: } 51,
{ 227: } 51,
{ 228: } 51,
{ 229: } 52,
{ 230: } 52,
{ 231: } 53,
{ 232: } 53,
{ 233: } 53,
{ 234: } 53,
{ 235: } 53,
{ 236: } 53,
{ 237: } 53,
{ 238: } 54,
{ 239: } 54,
{ 240: } 54,
{ 241: } 54,
{ 242: } 54,
{ 243: } 54,
{ 244: } 55,
{ 245: } 55,
{ 246: } 55,
{ 247: } 55,
{ 248: } 55,
{ 249: } 55,
{ 250: } 55,
{ 251: } 55,
{ 252: } 55,
{ 253: } 55,
{ 254: } 55,
{ 255: } 55,
{ 256: } 55,
{ 257: } 55,
{ 258: } 55,
{ 259: } 55,
{ 260: } 55,
{ 261: } 56,
{ 262: } 56,
{ 263: } 56,
{ 264: } 57
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 4,
{ 2: } 11,
{ 3: } 15,
{ 4: } 22,
{ 5: } 26,
{ 6: } 34,
{ 7: } 37,
{ 8: } 44,
{ 9: } 47,
{ 10: } 54,
{ 11: } 57,
{ 12: } 64,
{ 13: } 68,
{ 14: } 77,
{ 15: } 80,
{ 16: } 95,
{ 17: } 98,
{ 18: } 111,
{ 19: } 114,
{ 20: } 126,
{ 21: } 129,
{ 22: } 141,
{ 23: } 144,
{ 24: } 153,
{ 25: } 153,
{ 26: } 155,
{ 27: } 155,
{ 28: } 156,
{ 29: } 157,
{ 30: } 158,
{ 31: } 159,
{ 32: } 161,
{ 33: } 164,
{ 34: } 165,
{ 35: } 167,
{ 36: } 169,
{ 37: } 171,
{ 38: } 172,
{ 39: } 174,
{ 40: } 175,
{ 41: } 177,
{ 42: } 178,
{ 43: } 179,
{ 44: } 180,
{ 45: } 181,
{ 46: } 182,
{ 47: } 183,
{ 48: } 184,
{ 49: } 185,
{ 50: } 186,
{ 51: } 187,
{ 52: } 188,
{ 53: } 189,
{ 54: } 189,
{ 55: } 190,
{ 56: } 191,
{ 57: } 193,
{ 58: } 194,
{ 59: } 195,
{ 60: } 196,
{ 61: } 197,
{ 62: } 199,
{ 63: } 200,
{ 64: } 202,
{ 65: } 206,
{ 66: } 208,
{ 67: } 210,
{ 68: } 211,
{ 69: } 212,
{ 70: } 213,
{ 71: } 214,
{ 72: } 215,
{ 73: } 216,
{ 74: } 217,
{ 75: } 218,
{ 76: } 219,
{ 77: } 220,
{ 78: } 221,
{ 79: } 222,
{ 80: } 223,
{ 81: } 224,
{ 82: } 225,
{ 83: } 226,
{ 84: } 227,
{ 85: } 230,
{ 86: } 231,
{ 87: } 232,
{ 88: } 233,
{ 89: } 234,
{ 90: } 235,
{ 91: } 236,
{ 92: } 238,
{ 93: } 240,
{ 94: } 242,
{ 95: } 243,
{ 96: } 246,
{ 97: } 249,
{ 98: } 250,
{ 99: } 251,
{ 100: } 252,
{ 101: } 253,
{ 102: } 254,
{ 103: } 255,
{ 104: } 256,
{ 105: } 257,
{ 106: } 258,
{ 107: } 259,
{ 108: } 262,
{ 109: } 265,
{ 110: } 268,
{ 111: } 271,
{ 112: } 274,
{ 113: } 276,
{ 114: } 277,
{ 115: } 279,
{ 116: } 280,
{ 117: } 280,
{ 118: } 281,
{ 119: } 282,
{ 120: } 285,
{ 121: } 286,
{ 122: } 287,
{ 123: } 289,
{ 124: } 291,
{ 125: } 293,
{ 126: } 295,
{ 127: } 297,
{ 128: } 298,
{ 129: } 308,
{ 130: } 309,
{ 131: } 310,
{ 132: } 311,
{ 133: } 312,
{ 134: } 313,
{ 135: } 314,
{ 136: } 315,
{ 137: } 316,
{ 138: } 317,
{ 139: } 318,
{ 140: } 320,
{ 141: } 321,
{ 142: } 329,
{ 143: } 331,
{ 144: } 332,
{ 145: } 339,
{ 146: } 341,
{ 147: } 342,
{ 148: } 349,
{ 149: } 351,
{ 150: } 352,
{ 151: } 356,
{ 152: } 358,
{ 153: } 359,
{ 154: } 360,
{ 155: } 363,
{ 156: } 364,
{ 157: } 365,
{ 158: } 365,
{ 159: } 366,
{ 160: } 367,
{ 161: } 369,
{ 162: } 370,
{ 163: } 371,
{ 164: } 374,
{ 165: } 375,
{ 166: } 376,
{ 167: } 379,
{ 168: } 381,
{ 169: } 383,
{ 170: } 385,
{ 171: } 388,
{ 172: } 390,
{ 173: } 391,
{ 174: } 393,
{ 175: } 394,
{ 176: } 395,
{ 177: } 396,
{ 178: } 397,
{ 179: } 398,
{ 180: } 399,
{ 181: } 400,
{ 182: } 401,
{ 183: } 402,
{ 184: } 403,
{ 185: } 404,
{ 186: } 405,
{ 187: } 406,
{ 188: } 407,
{ 189: } 408,
{ 190: } 409,
{ 191: } 412,
{ 192: } 413,
{ 193: } 416,
{ 194: } 419,
{ 195: } 422,
{ 196: } 425,
{ 197: } 425,
{ 198: } 426,
{ 199: } 427,
{ 200: } 430,
{ 201: } 432,
{ 202: } 433,
{ 203: } 433,
{ 204: } 434,
{ 205: } 437,
{ 206: } 439,
{ 207: } 440,
{ 208: } 441,
{ 209: } 442,
{ 210: } 443,
{ 211: } 444,
{ 212: } 445,
{ 213: } 446,
{ 214: } 447,
{ 215: } 448,
{ 216: } 449,
{ 217: } 450,
{ 218: } 453,
{ 219: } 454,
{ 220: } 456,
{ 221: } 457,
{ 222: } 458,
{ 223: } 459,
{ 224: } 460,
{ 225: } 461,
{ 226: } 462,
{ 227: } 462,
{ 228: } 464,
{ 229: } 466,
{ 230: } 467,
{ 231: } 468,
{ 232: } 469,
{ 233: } 470,
{ 234: } 471,
{ 235: } 472,
{ 236: } 473,
{ 237: } 475,
{ 238: } 476,
{ 239: } 477,
{ 240: } 478,
{ 241: } 480,
{ 242: } 482,
{ 243: } 483,
{ 244: } 486,
{ 245: } 488,
{ 246: } 490,
{ 247: } 491,
{ 248: } 493,
{ 249: } 494,
{ 250: } 495,
{ 251: } 497,
{ 252: } 498,
{ 253: } 501,
{ 254: } 502,
{ 255: } 503,
{ 256: } 505,
{ 257: } 506,
{ 258: } 507,
{ 259: } 509,
{ 260: } 511,
{ 261: } 513,
{ 262: } 515,
{ 263: } 517,
{ 264: } 519
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 3,
{ 1: } 10,
{ 2: } 14,
{ 3: } 21,
{ 4: } 25,
{ 5: } 33,
{ 6: } 36,
{ 7: } 43,
{ 8: } 46,
{ 9: } 53,
{ 10: } 56,
{ 11: } 63,
{ 12: } 67,
{ 13: } 76,
{ 14: } 79,
{ 15: } 94,
{ 16: } 97,
{ 17: } 110,
{ 18: } 113,
{ 19: } 125,
{ 20: } 128,
{ 21: } 140,
{ 22: } 143,
{ 23: } 152,
{ 24: } 152,
{ 25: } 154,
{ 26: } 154,
{ 27: } 155,
{ 28: } 156,
{ 29: } 157,
{ 30: } 158,
{ 31: } 160,
{ 32: } 163,
{ 33: } 164,
{ 34: } 166,
{ 35: } 168,
{ 36: } 170,
{ 37: } 171,
{ 38: } 173,
{ 39: } 174,
{ 40: } 176,
{ 41: } 177,
{ 42: } 178,
{ 43: } 179,
{ 44: } 180,
{ 45: } 181,
{ 46: } 182,
{ 47: } 183,
{ 48: } 184,
{ 49: } 185,
{ 50: } 186,
{ 51: } 187,
{ 52: } 188,
{ 53: } 188,
{ 54: } 189,
{ 55: } 190,
{ 56: } 192,
{ 57: } 193,
{ 58: } 194,
{ 59: } 195,
{ 60: } 196,
{ 61: } 198,
{ 62: } 199,
{ 63: } 201,
{ 64: } 205,
{ 65: } 207,
{ 66: } 209,
{ 67: } 210,
{ 68: } 211,
{ 69: } 212,
{ 70: } 213,
{ 71: } 214,
{ 72: } 215,
{ 73: } 216,
{ 74: } 217,
{ 75: } 218,
{ 76: } 219,
{ 77: } 220,
{ 78: } 221,
{ 79: } 222,
{ 80: } 223,
{ 81: } 224,
{ 82: } 225,
{ 83: } 226,
{ 84: } 229,
{ 85: } 230,
{ 86: } 231,
{ 87: } 232,
{ 88: } 233,
{ 89: } 234,
{ 90: } 235,
{ 91: } 237,
{ 92: } 239,
{ 93: } 241,
{ 94: } 242,
{ 95: } 245,
{ 96: } 248,
{ 97: } 249,
{ 98: } 250,
{ 99: } 251,
{ 100: } 252,
{ 101: } 253,
{ 102: } 254,
{ 103: } 255,
{ 104: } 256,
{ 105: } 257,
{ 106: } 258,
{ 107: } 261,
{ 108: } 264,
{ 109: } 267,
{ 110: } 270,
{ 111: } 273,
{ 112: } 275,
{ 113: } 276,
{ 114: } 278,
{ 115: } 279,
{ 116: } 279,
{ 117: } 280,
{ 118: } 281,
{ 119: } 284,
{ 120: } 285,
{ 121: } 286,
{ 122: } 288,
{ 123: } 290,
{ 124: } 292,
{ 125: } 294,
{ 126: } 296,
{ 127: } 297,
{ 128: } 307,
{ 129: } 308,
{ 130: } 309,
{ 131: } 310,
{ 132: } 311,
{ 133: } 312,
{ 134: } 313,
{ 135: } 314,
{ 136: } 315,
{ 137: } 316,
{ 138: } 317,
{ 139: } 319,
{ 140: } 320,
{ 141: } 328,
{ 142: } 330,
{ 143: } 331,
{ 144: } 338,
{ 145: } 340,
{ 146: } 341,
{ 147: } 348,
{ 148: } 350,
{ 149: } 351,
{ 150: } 355,
{ 151: } 357,
{ 152: } 358,
{ 153: } 359,
{ 154: } 362,
{ 155: } 363,
{ 156: } 364,
{ 157: } 364,
{ 158: } 365,
{ 159: } 366,
{ 160: } 368,
{ 161: } 369,
{ 162: } 370,
{ 163: } 373,
{ 164: } 374,
{ 165: } 375,
{ 166: } 378,
{ 167: } 380,
{ 168: } 382,
{ 169: } 384,
{ 170: } 387,
{ 171: } 389,
{ 172: } 390,
{ 173: } 392,
{ 174: } 393,
{ 175: } 394,
{ 176: } 395,
{ 177: } 396,
{ 178: } 397,
{ 179: } 398,
{ 180: } 399,
{ 181: } 400,
{ 182: } 401,
{ 183: } 402,
{ 184: } 403,
{ 185: } 404,
{ 186: } 405,
{ 187: } 406,
{ 188: } 407,
{ 189: } 408,
{ 190: } 411,
{ 191: } 412,
{ 192: } 415,
{ 193: } 418,
{ 194: } 421,
{ 195: } 424,
{ 196: } 424,
{ 197: } 425,
{ 198: } 426,
{ 199: } 429,
{ 200: } 431,
{ 201: } 432,
{ 202: } 432,
{ 203: } 433,
{ 204: } 436,
{ 205: } 438,
{ 206: } 439,
{ 207: } 440,
{ 208: } 441,
{ 209: } 442,
{ 210: } 443,
{ 211: } 444,
{ 212: } 445,
{ 213: } 446,
{ 214: } 447,
{ 215: } 448,
{ 216: } 449,
{ 217: } 452,
{ 218: } 453,
{ 219: } 455,
{ 220: } 456,
{ 221: } 457,
{ 222: } 458,
{ 223: } 459,
{ 224: } 460,
{ 225: } 461,
{ 226: } 461,
{ 227: } 463,
{ 228: } 465,
{ 229: } 466,
{ 230: } 467,
{ 231: } 468,
{ 232: } 469,
{ 233: } 470,
{ 234: } 471,
{ 235: } 472,
{ 236: } 474,
{ 237: } 475,
{ 238: } 476,
{ 239: } 477,
{ 240: } 479,
{ 241: } 481,
{ 242: } 482,
{ 243: } 485,
{ 244: } 487,
{ 245: } 489,
{ 246: } 490,
{ 247: } 492,
{ 248: } 493,
{ 249: } 494,
{ 250: } 496,
{ 251: } 497,
{ 252: } 500,
{ 253: } 501,
{ 254: } 502,
{ 255: } 504,
{ 256: } 505,
{ 257: } 506,
{ 258: } 508,
{ 259: } 510,
{ 260: } 512,
{ 261: } 514,
{ 262: } 516,
{ 263: } 518,
{ 264: } 518
);


var yyn : Integer;

label start, scan, action, readnext;

begin
  inc(yyvars.yyiter);
  if yyvars.yyiter>1 then goto scan;

start:
  { initialize: }
  yynew(yyvars);

scan:
  { mark positions and matches: }
  for yyn := yykl[yyvars.yystate] to     yykh[yyvars.yystate] do yymark(yyk[yyn],yyvars);
  for yyn := yymh[yyvars.yystate] downto yyml[yyvars.yystate] do yymatch(yym[yyn],yyvars);

  if yytl[yyvars.yystate]>yyth[yyvars.yystate] then goto action; { dead state }

  { get next character: }
  yyscan(yyvars);

  { determine action: }
  yyn := yytl[yyvars.yystate];
  while (yyn<=yyth[yyvars.yystate]) and not (yyvars.yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yyvars.yystate] then goto action;
    { no transition on yyactchar in this state }

  { switch to new state: }
  yyvars.yystate := yyt[yyn].s;

  if yyvars.bufptr>yyvars.buflen then goto readnext
  else goto scan;

action:
  { execute action: }
  if yyfind(yyvars.yyrule,yyvars) then
  begin
    yyaction(yyvars.yyrule,yyvars);
    if yyvars.yyreject then goto action;
  end
  else if yyvars.bufptr>yyvars.buflen then goto readnext
       else if not yydefault(yyvars) then
            begin
              yyclear(yyvars);
              return(0,yyvars);
            end;

  if not yyvars.yydone then goto start;

readnext:
  yyhostlex := yyvars.yyretval;

end;


{
var i : Integer;

var
  yyvars : tyyvars;
  count : integer;
  fname : ansistring;
  fhandle : file;
begin
  clrscr;
  for i := 1 to NS do sects[i]:=0;

  yyvars.yylineno:=0;
  yyclear(yyvars);
  yyvars.yyiter:=0;

  fname:='long.txt';
  if fileexists(fname) then
  begin
    assign(fhandle,fname);
    reset(fhandle, sizeof(char));
    blockread(fhandle,yyvars.buf,100,yyvars.buflen);
    yyvars.bufptr:=1;
    while yyvars.buflen>0 do
    begin
      if yylex(yyvars)=0 then ;//write('*');
      blockread(fhandle,yyvars.buf,100,yyvars.buflen);
      yyvars.bufptr:=1;
    end;
    close(fhandle);
  end;

  writeln;
  writeln;
  write('|');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  write('sect':5, ' ', 'num':3,' |');
  writeln;
  count:=0;
  for i := 1 to NS do
    if sects[i]>0 then
    begin
      if (count mod 7)=0 then write('|');
      inc(count);
      write(i:5, ' ', sects[i]:3,' |');
      if (count mod 7)=0 then writeln;
    end;
end.
}
